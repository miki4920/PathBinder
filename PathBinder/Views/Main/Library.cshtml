@{
    ViewData["Title"] = "Library";
}
@model IEnumerable<FileItem>
<link rel="stylesheet" href="~/css/library.css" />
<!DOCTYPE html>
<html>
<head>
    <title>Tabletop Documents</title>
</head>
<body>

    <section>
        <article id="tiles">
            <div id="sort">
                <select id="sortKey" onchange="displayDocuments()">
                    <option value="name">Name</option>
                    <option value="lastModified">Last Modified</option>
                </select>
                <button id="sortOrder" data-order="1" onclick="this.dataset.order = 1 - this.dataset.order; this.textContent = this.dataset.order == '0' ? '▲ Ascending' : '▼ Descending'; displayDocuments();">▼ Descending</button>
            </div>
            <button class="floatingButton" id="addDocumentButton" onclick="addDocument()"><i class="fa-solid fa-plus" aria-hidden="true"></i> <span class="accessibleText">Add Document</span></button>
            <button class="floatingButton" id="importDocumentButton" onclick="importDocument"><i class="fa-solid fa-file-import" aria-hidden="true"></i><span class="accessibleText">Import Document</span></button>
            <input type="file" hidden accept=".json" id="importDocument" aria-hidden="true" tabindex="-1" aria-label="Import Document" />
        </article>
    </section>
    <script>
        class Helper {
            static getInput(promptText) {
                const name = prompt(promptText);
                return name && name.trim() !== "" ? name.trim() : "";
            }
        }
        class DOMManager {
            static createElement(tag, elementClass = "", text = "") {
                const element = document.createElement(tag);
                if (elementClass) element.className = elementClass;
                if (text) element.textContent = text;
                return element;
            }
            static appendChild(parent, child)  { parent.appendChild(child); }
            static removeChild(parent, child)  { parent.removeChild(child); }
            static updateText(element, text)  { element.textContent = text; }
        }


        class DocumentManager {
            async getAllDocuments(sortKey = "lastModified", sortOrder = "desc") {
                const params = new URLSearchParams({ sortKey, sortOrder });
                const r = await fetch(`/api/files?${params.toString()}`, {
                    headers: { Accept: "application/json" }
                });
                if (!r.ok) throw new Error("Cannot fetch library");
                return (await r.json()).map(d => ({ key: d.id, data: d }));
            }
            async addDocument(document) {
                const r = await fetch("/api/files", {
                    method: "POST",
                    headers: { "Content-Type": "application/json" },
                    body: JSON.stringify(document)
                });
            }
            async removeDocument(key) {
                const r = await fetch(`/api/files/${key}`, { method: "DELETE" });
            }
            async renameDocument(key, newName) {
                const r = await fetch(`/api/files/${key}`, {
                    method: "PUT",
                    headers: { "Content-Type": "application/json" },
                    body: JSON.stringify({ name: newName })
                });
            }
            async exportDocument(key) {
                const r = await fetch(`/api/files/${key}`);
                if (!r.ok) return;
                const doc  = await r.json();
                const blob = new Blob([JSON.stringify(doc)], { type: "application/json" });
                const a    = DOMManager.createElement("a");
                a.download = `${doc.name}.json`;
                a.href     = URL.createObjectURL(blob);
                a.dispatchEvent(new MouseEvent("click", { bubbles: true, cancelable: true }));
                a.remove();
            }
        }

        const docManager = new DocumentManager();

        async function displayDocuments() {
            const tiles = document.getElementById("tiles");
            document.querySelectorAll(".wrapper").forEach(e => e.remove());
			const sortKey = document.getElementById("sortKey").value;
			const sortOrder = document.getElementById("sortOrder").dataset.order === "1" ? "asc" : "desc";
            let docs = await docManager.getAllDocuments(sortKey, sortOrder);
            for (const { key, data } of docs) {
                const wrap = DOMManager.createElement("div", "wrapper");
                const tile = DOMManager.createElement("a", "tile", data.name);
                tile.href = `/write/${key}`;
                tile.style.backgroundImage = `url(${data.cover})`;
                const buttonContainer = DOMManager.createElement("div", "buttonContainer");

                const downloadButton = DOMManager.createElement("button", "tileButton", "Download");
                const deleteButton   = DOMManager.createElement("button", "tileButton", "Delete");
                const renameButton   = DOMManager.createElement("button", "tileButton", "Rename");

                downloadButton.onclick = async e => {
                    e.stopPropagation();
                    await docManager.exportDocument(key);
                };

                renameButton.onclick = async e => {
                    e.stopPropagation();
                    const newName = Helper.getInput("Edit name of your document:");
                    if (!newName) return;
                    await docManager.renameDocument(key, newName);
                    DOMManager.updateText(tile, newName);
                };

                deleteButton.onclick = async e => {
                    e.stopPropagation();
                    if (!confirm(`Delete ${data.name}?`)) return;
                    await docManager.removeDocument(key);
                    DOMManager.removeChild(tiles, wrap);
                };

                [downloadButton, renameButton, deleteButton].forEach(button =>
                    DOMManager.appendChild(buttonContainer, button)
                );

                [tile, buttonContainer].forEach(element =>
                    DOMManager.appendChild(wrap, element)
                );

                DOMManager.appendChild(tiles, wrap);

            }
        }

        async function addDocument() {
            const name = Helper.getInput("Name your document:");
            const content = "";
            const cover = "";
            if (!name) return;
            await docManager.addDocument({name, content, cover});
            await displayDocuments();
        }

        function importDocument(file) {
            const r = new FileReader();
            r.readAsText(file, "application/json");
            r.onload = async e => {
                await docManager.addDocument(JSON.parse(e.target.result));
                await displayDocuments();
            };
        }

        window.addEventListener("load",  displayDocuments);
        const fileInput = document.getElementById("importDocument");
        document.getElementById("importDocumentButton").onclick = () => fileInput.click();
        fileInput.onchange = () => importDocument(fileInput.files[0]);
    </script>
</body>
</html>