@{
    ViewData["Title"] = "Library";
}
<link rel="stylesheet" href="~/css/library.css" />
<!DOCTYPE html>
<html>
<head>
    <title>Tabletop Documents</title>
</head>
<body>

    <section>
        <article id="tiles">
            <div id="sort">
                <select id="sortKey" onchange="displayDocuments()">
                    <option value="name">Name</option>
                    <option value="lastModified">Last Modified</option>
                </select>
                <button id="sortOrder" data-order="1" onclick="this.dataset.order = 1 - this.dataset.order; this.textContent = this.dataset.order == '0' ? '▲ Ascending' : '▼ Descending'; displayDocuments();">▼ Descending</button>
            </div>
            <button class="floatingButton" id="addDocumentButton" onclick="addDocument()"><i class="fa-solid fa-plus" aria-hidden="true"></i> <span class="accessibleText">Add Document</span></button>
            <button class="floatingButton" id="importDocumentButton" onclick="importDocument"><i class="fa-solid fa-file-import" aria-hidden="true"></i><span class="accessibleText">Import Document</span></button>
            <input type="file" hidden accept=".json" id="importDocument" aria-hidden="true" tabindex="-1" aria-label="Import Document" />
        </article>
    </section>
    <script>
        class Helper {
            static getInput(promptText) {
                let name = prompt(promptText);
                if (name === null || name.trim() === "") {
                    return "";
                }
                return name;
            }
        }
        class LocalStorageManager {
            getKey(key) {
                key = JSON.parse(localStorage.getItem(key))
                return key ? key : null;
            }

            getKeys() {
                let keys = Object.keys(localStorage)
                if (keys) return keys;
                return [];
            }

            setKey(key, value) {
                localStorage.setItem(key, JSON.stringify(value));
            }

            removeKey(key) {
                localStorage.removeItem(key);
            }
        }

        class DocumentManager {
            constructor(storageManager) {
                this.storageManager = storageManager;
            }

            getAllDocuments() {
                let docs = [];
                for (let key of this.storageManager.getKeys()) {
                    if (key.startsWith("doc")) {
                        docs.push({
                            key: key,
                            data: this.storageManager.getKey(key)
                        });
                    }
                }
                return docs;
            }

            removeDocument(key) {
                this.storageManager.removeKey(key);
            }

            addDocument(parameters) {
                const uid = this._generateUID();
                this.storageManager.setKey(uid, parameters);
                this.storageManager.setKey('currentlyOpen', uid);
            }

            exportDocument(key) {
                const document = this.storageManager.getKey(key); 
                const fileName = `${document["name"]}.json`
                const file = new Blob([JSON.stringify(document)], {
                    type: 'application/json'
                });
                const link = DOMManager.createElement("a");
                link.download = fileName;
                link.href = window.URL.createObjectURL(file);
                link.dataset.downloadurl = ["text/json", link.download, link.href].join(":");
                const evt = new MouseEvent("click", {
                    view: window,
                    bubbles: true,
                    cancelable: true,
                });

                link.dispatchEvent(evt);
                link.remove()
            }

            _generateUID() {
                return 'doc_' + Date.now().toString(36) + Math.random().toString(36).substring(2);
            }
        }

        class DOMManager {
            static createElement(type, className, content = '') {
                let element = document.createElement(type);
                if (className) {
                    element.className = className;
                }
                if (content) {
                    element.textContent = content;
                }
                return element;
            }

            static appendChild(parent, child) {
                parent.appendChild(child);
            }

            static removeChild(parent, child) {
                parent.removeChild(child);
            }

            static updateTextContent(element, newTextContent) {
                element.textContent = newTextContent;
            }
        }

        const storageManager = new LocalStorageManager();
        const docManager = new DocumentManager(storageManager);

        function displayDocuments() {
            let tiles = document.getElementById("tiles");
            document.querySelectorAll('.wrapper').forEach(function (element) {
                element.remove();
            });
            for (let { key, data } of docManager.getAllDocuments()) {
                let wrapper = DOMManager.createElement("div", "wrapper");
                let tile = DOMManager.createElement("div", "tile", data["name"]);
                
                if (data["cover"]) {
                    tile.style.backgroundImage = `url(${data["cover"]})`;
                }
                tile.addEventListener("click", function () {
                    storageManager.setKey('currentlyOpen', key.trim());
                    window.location.href = '/Main/Write';
                });

                let buttonContainer = DOMManager.createElement("div", "buttonContainer");

                let exportButton = DOMManager.createElement("button", "tileButton", 'Download');
                exportButton.addEventListener("click", function (event) {
                    event.stopPropagation();
                    docManager.exportDocument(key);
                });

                let deleteButton = DOMManager.createElement("button", "tileButton", 'Delete');
                deleteButton.addEventListener("click", function (event) {
                    event.stopPropagation(); 
                    if (confirm(`Are you sure you want to delete ${data["name"]}?`)) {
                        docManager.removeDocument(key);
                        DOMManager.removeChild(tiles, wrapper);
                    }
                });

                let editButton = DOMManager.createElement("button", "tileButton", 'Rename');
                editButton.addEventListener("click", function (event) {
                    event.stopPropagation(); 
                    let name = Helper.getInput("Edit name of your document:");
                    if (name === "") {
                        return;
                    }
                    data["name"] = name;
                    docManager.storageManager.setKey(key, data);  
                    DOMManager.updateTextContent(tile, name);
                });
                
                DOMManager.appendChild(wrapper, tile);
                DOMManager.appendChild(buttonContainer, exportButton);
                DOMManager.appendChild(buttonContainer, editButton);
                DOMManager.appendChild(buttonContainer, deleteButton);
                DOMManager.appendChild(wrapper, buttonContainer);
                DOMManager.appendChild(tiles, wrapper);
            }
        }

        const templateContent = `{{cover https://cdn.paizo.com/a7d62ac8-7f03-00ef-f1f0-83fb8bf332e2/4c4e26de-a41d-4c15-87da-b8c3129c13ac/PFInfiniteLogo.png}}\n\n{{title Title}}\n\n{{pagebreak}}\n# Chapter Title (#)\n\n{{header This is a "wide" one column text, using "flavor" serif font used for lore and flavor text and "sibtitle" for displaying flavor under a chapter title. Even if you have no subtitle, this div is needed to display the fancy separator line under the chapter title. }}\n\n## Header 2 (##)\n\nUse this header for subchapters, such as different types of equipment in the Equipment chapter. \n\n### Header 3 (###)\n\nUse this header for various topics and separate rules, such as different aspects of combat.  \n\n#### Header 4 (####)\n\nUse this header for feats and actions that need a separating line from the content below it.\n\n##### Header 5  (#####)\n\nUse this header for feats, actions and similar items that do not need a separating line from the content below it.\n\n###### Header 6 (######)\n\nUse this header for separating feats for specific level from those requiring lower or higher level. \n\n## Action Icons\n\nThe action icons supported are: {{freeaction}} {{oneaction}} {{twoaction}} {{threeaction}} {{reaction}} {{passive}}\n\n## Example Feat \n\n#### Feat Title {{oneaction}} {{label FEAT 1}}\n{{tag UNCOMMON}}\n{{tag RARE}}\n{{tag ARCANE}}\n{{tag MANIPULATE}}\n{{tag UNCOMMON}}\n{{tag RARE}}\n{{tag ARCANE}}\n\n{{line **Prerequisities** List prerequisites such as skill proficiency here. Magic  is working its way here...}}\n\n{{line **Requirements** List requirements such as items held here.}}\n{{linebreak}}\n\nWrite the rules of the feat or action here, without including the results (such as success or failure) of the action. They use the HTML code blocks below. Do not add "Sucess" or "Failure" before the results as these words are added automatically, in bold. Markdown code can't be used in rule texts using this font.\n\n{{line **Critical Success** result is written here. As you can see the results support Pathfinder's signature indentation.}}\n{{line**Success result** is written here.}}\n{{line**Failure result** is written here.}}\n{{line**Critical failure** result is written here.}}\n\n{{columnbreak}}\n\n## Example Action\n\n#### Action Title {{oneaction}} {{twoaction}} {{threeaction}} \n{{tag UNCOMMON}}\n{{tag RARE}}\n{{tag ARCANE}}\n\nYou spend 10 minutes to do a specific action and one of several results may occur. \n{{line **Critical Success** result is written here. As you can see the results support Pathfinder's signature indentation.}}\n{{line **Success** result is written here.}}\n{{line **Failure** result is written here.}}\n{{line **Critical failure** result is written here.}}\n\n## Example Spell\n\n#### Spell Title <div class="label">SPELL 1</div>\n{{tag UNCOMMON}}\n{{tag RARE}}\n{{line **Traditions** arcane, divine, occult, primal}}\n{{line **Cast** {{twoaction}} somatic, verbal}}\n{{line **Trigger** Needed for reaction spells.}}\n{{line **Range** touch; **Targets** 1 creature; **Area** 20-foot burst}}\n{{line **Saving Throw** Fortitude, Reflex or Will}}\n{{linebreak}}\nA roaring blast of fire appears at a spot you designate, dealing 6d6 fire damage.\n{{linebreak}}\n{{line **Heightened (+1)** The damage increases by 2d6.}}\n\n\n{{pagebreak}}\n\n\n## Example Creature\n\nUse Heading 2 for creature families that may contain one or several creatures with similar traits and abilities. \n\n### Creature Name\n\nUse Heading 3 for individual creatures and their description, lore, habitat and behavior. \n\n#### Creature Name <div class="label">CREATURE 1</div>\n{{tag Creature}}\n\n{{line **Perception** +5; darkvision}}\n{{line **Languages** common}}\n{{line **Skills** Acrobatics +12, Diplomacy +15, Intimidating +12, Performance +17, Religion +14}}\n{{line **Str** +1; **Dex** +2; **Con** +3; **Int** +0; **Wis** -5; **Cha** +2;}}\n{{linebreak}}\n{{line **AC** 19 (14 when broken; **Fort** +3;**Ref** +6;**Will** +3}}\n{{line **HP** 48; **Hardness** 8; **Immunities** bleed, death effects, disease, doomed, drained, fatigued, healing, mental, necromancy, nonlethal attacks, paralyzed, poison, sickened, unconscious **Weaknesses** cold 10; **Resistances** fire 5;}}\n{{linebreak}}\n{{line **Speed** 30 feet}}\n{{line **Melee** {{oneaction}}  stone fist +19 (magical); **Damage** 2d12+6 bludgeoning plus Grab;}}\n{{line **Ranged** {{oneaction}} flaming coal +12 (finesse, fire, magical, range increment 80 feet); **Damage** 2d6+6 bludgeoning and 2d8 fire}}\n{{line **Arcane Innate Spells** DC 23. attack +14; **2nd** dispel magic, invisibility, resist energy **1st** ray of enfeeblement, true strike (×2); **Cantrips (2nd)** detect magic, ghost sound, mage hand, ray of frost, read aura}}\n{{line **Ability Name** {{twoaction}} Describe your ability here and set the proper action icon. You can copy paragraphs like this one in any section above to explain an innate ability or reaction of the creature.}}\n\n## Example Hazard\n\n#### Hazard Name {{label Hazard 1}}\n{{tag UNCOMMON}}\n{{line **Stealth** +20}}\n{{line **Description** Describe what the hazard looks like.}}\n{{linebreak}}\n**Disable** Acrobatics DC 13 to approach without triggering the trap followed by Thievery DC 15 (trained) to disable it. \n{{line **AC** 19; **Fort** +3;**Ref** +6;**Will** +3}}\n{{line **Hazard Action** Define each of the actions of the hazard.}}\n{{line **Routine** Long description of the behavior model of a complex hazard.}}\n{{linebreak}}\n{{line **Reset** Conditions that must be met for the hazard to reset.}}\n\n{{columnbreak}}\n\n## Example Item\n\n#### Item Name {{label ITEM 1}}\n{{tag uncommon}}\n{{tag Acid}}\n{{tag Alchemical}}\n{{tag Bomb}}\n\n{{line **Price** 10 gp}}\n{{line **Usage** held with 2 hands; **Bulk** L;}}\n{{line **Activate** {{twoaction}} interact;}}\n{{linebreak}}\n{{line **Hardness** 4; **HP** 16; **BT** 8;}}\n\n{{line Description of the item. If it is a poison, apply the block below. \nRemove it the item is not a poison}}\n\n{{line **Saving Throw** DC 40 Fortitude; **Onset** 30 minutes\n**Maximum Duration** 1 day\n**Stage 1** 1d6 poison damage and enfeebled 1 (10 minutes)\n**Stage 2** 2d6 poison damage and enfeebled 1 (10 minutes)\n}}\n{{linebreak}}\n{{line **Type** *lesser*; **Level** 1; **Price** 10gp;\nThis item has +1 item bonus.}}\n{{linebreak}}\n{{line **Type** *greater*; **Level** 6; **Price** 160gp;\nThis item has +2 item bonus.}}\n`

        function addDocument() {
            let name = Helper.getInput("Name your document:")
            if (name === "") {
                return;
            }
            docManager.addDocument({ "name": name, "content": templateContent });
            displayDocuments();
        }

        function importDocument(file) {
            const reader = new FileReader();
            reader.readAsText(file, "text/json");
            reader.onload = function (event) 
            {   
                const fileContent = JSON.parse(event.target.result);
                docManager.addDocument(
                    {
                    "name": fileContent["name"],
                    "content": fileContent["content"],
                    "cover": fileContent["cover"]
                    })
                displayDocuments()
            }
        }

        window.onload = displayDocuments();

        let documentInput = document.getElementById("importDocument");

        document.getElementById("importDocumentButton").onclick = () => {
            documentInput.click();
        }
        documentInput.onchange = () => {
            importDocument(documentInput.files[0]);
        }
    </script>
</body>
</html>