@{
    ViewData["Title"] = "Write";
}
<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/codemirror/6.65.7/codemirror.min.css" />
<link rel="stylesheet" href="~/css/write.css" />
<section>
    <div id="writeAreaHolder">
        <nav>
            <button onclick="postDocument()"><i class="fa-solid fa-floppy-disk"></i>Save</button>
            <button onclick="promptForURL()"><i class="fa-solid fa-globe"></i>Import</button>
            <button onclick="askBackgroundImage()"><i class="fa-solid fa-image"></i>Cover</button>
            <button onclick="printDocument()"><i class="fa-solid fa-print"></i>Print</button>
        </nav>
        <div id="writeArea">
    </div>
    </div>
    <div class="resizer"></div>
    <div id="displayAreaHolder"></div>
</section>
<script src="https://kit.fontawesome.com/719dd23465.js" crossorigin="anonymous"></script>
<script src="~/lib/jquery/dist/jquery.min.js"></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/codemirror/6.65.7/codemirror.min.js"></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/codemirror/6.65.7/mode/markdown/markdown.min.js"></script>
<script src="https://unpkg.com/showdown/dist/showdown.min.js"></script>
<script>
    
    $("#displayAreaHolder").on("scroll", function () {
        localStorage.setItem("PathBinder-Scroll", $("#displayAreaHolder").scrollTop());
    });
    CodeMirror.defineMode("mustacheHighlight", function (config, parserConfig) {
        return {
            token: function (stream, state) {
                if (stream.match("{{") || stream.match("}}")) {
                    return "mustache-brackets";
                }

                if (stream.match(/^#/) || stream.match(/^\*/)) {
                    return "mustache-markdown";
                }

                if (stream.string.charAt(stream.start - 2) === '{' || stream.string.charAt(stream.start - 4) === '{') {
                    if (stream.match(/^[^\s{}]+/)) {
                        return "mustache-firstWord";
                    }
                }

                stream.next();
                return null;
            }
        };
    });
    const editor = CodeMirror(document.getElementById("writeArea"), {
        lineNumbers: true,
        lineWrapping: true,
        styleActiveLine: true,
        matchBrackets: true,
        theme: "default",
        mode: "mustacheHighlight",
        scrollbarStyle: "native"
    });
    editor.addOverlay({ name: "mustacheHighlight" });
    const displayArea = document.getElementById("displayAreaHolder");
    const converter = new showdown.Converter();
    const shadow = displayArea.attachShadow({ mode: "open" });
    let pageStyle = null;
    fetch('/css/page.css')
        .then(response => {
            if (!response.ok) {
                throw new Error('Network response was not ok' + response.statusText);
            }
            return response.text();
        })
        .then(css => {
            pageStyle = document.createElement('style');
            pageStyle.textContent = css;
            
        })
        .catch(error => {
            console.error('Fetch error: ', error);
        });
    function askBackgroundImage() {
        const url = prompt("Please enter a URL from Archives of Nethys:");
        setBackgroundImage(url);
        
    }

    function setBackgroundImage(url) {
        if (url) {
            shadow.childNodes[0].removeAttribute('style');
            shadow.childNodes[0].style.backgroundImage = `url(${url})`
            let currentlyOpenUid = localStorage.getItem('currentlyOpen');
            let existingDocumentData = JSON.parse(localStorage.getItem(currentlyOpenUid));
            existingDocumentData.cover = url;
            localStorage.setItem(currentlyOpenUid, JSON.stringify(existingDocumentData));
        }
    }

    function cleanContent(html) {
        const parser = new DOMParser();
        const doc = parser.parseFromString(html, 'text/html');

        const allElements = doc.querySelectorAll('*');
        allElements.forEach(element => {
            const firstChild = element.firstChild;
            if (firstChild && firstChild.nodeType === Node.TEXT_NODE && !firstChild.textContent.trim()) {
                element.remove();
            }
        });

        const actionSpans = doc.querySelectorAll('span[class*="action"]');
        actionSpans.forEach(span => {
            let content = span.textContent.trim();
            content = content.replace(/[-\[\]]/g, '');

            if (content.endsWith('s')) {
                content = content.slice(0, -1);
            }
            const replacementText = `{{${content}}}`;

            const textNode = document.createTextNode(replacementText);
            span.parentNode.replaceChild(textNode, span);
        });

        const anchors = doc.querySelectorAll('a');
        anchors.forEach(anchor => {
            const text = document.createTextNode(anchor.textContent);
            anchor.parentNode.replaceChild(text, anchor);
        })

        const bElements = doc.querySelectorAll('b');
        bElements.forEach(b => {
            const content = b.textContent.trim();

            const replacementText = `**${content}** `;

            const textNode = document.createTextNode(replacementText);
            b.parentNode.replaceChild(textNode, b);
        });

        const h1Elements = doc.querySelectorAll('h1');
        h1Elements.forEach(h1 => {
            const firstChildContent = h1.childNodes[0] ? h1.childNodes[0].textContent.trim() : '';
            const secondChildContent = h1.childNodes[1] ? h1.childNodes[1].textContent.trim() : '';

            const replacementText = `#### ${firstChildContent} {{label ${secondChildContent}}}\n`;

            const textNode = document.createTextNode(replacementText);
            h1.parentNode.replaceChild(textNode, h1);
        });



        const spanWithTagClass = doc.querySelectorAll('span[class*="trait"]');
        spanWithTagClass.forEach(span => {
            const content = span.textContent.trim();

            const replacementText = `{{tag ${content}}}\n`;

            const textNode = document.createTextNode(replacementText);
            span.parentNode.replaceChild(textNode, span);
        });

        const spans = doc.querySelectorAll('span');
        spans.forEach(span => {
            const content = span.innerHTML.trim();
            const replacementHTML = `<br>${content}`;
            span.outerHTML = replacementHTML;
        });

        const hrElements = doc.querySelectorAll('hr');
        hrElements.forEach(hr => {
            const replacementHTML = '<br>{{linebreak}}<br>';
            hr.outerHTML = replacementHTML;
        });

        const brElements = Array.from(doc.querySelectorAll('br'));

        brElements.forEach((br, index) => {
            if (index < brElements.length) { 
                const nextBr = brElements[index + 1];
                let contentNodes = [];
                let currentNode = br.nextSibling;
                while (currentNode && currentNode !== nextBr) {
                    contentNodes.push(currentNode);
                    currentNode = currentNode.nextSibling;
                }
                const content = contentNodes.map(node => node.textContent).join('').trim();
                if (content) {
                    const replacement = document.createTextNode(`{{line ${content}}}\n`);
                    doc.body.insertBefore(replacement, br);
                    contentNodes.forEach(node => node.remove());
                }
            }
            br.remove();
        });

        let content = doc.body.innerHTML;

        while (content.includes('{{line {{linebreak}}}}')) {
            content = content.replace('{{line {{linebreak}}}}', '{{linebreak}}');
        }

        doc.body.innerHTML = content;

        return doc.body.innerHTML;
    }

    function extractContent(content) {
        const titleElements = content.querySelectorAll('h1');
        const secondTitle = titleElements[1] === undefined ? titleElements[0] : titleElements[1];
        let currentNode = secondTitle.nextSibling;
        let extractedContent = secondTitle.outerHTML;
        while (currentNode) {
            if (["H1", "H2", "H3", "H4", "H5", "H6"].includes(currentNode.tagName) || !currentNode.nextSibling) {
                break;
            }
            extractedContent += currentNode.outerHTML ? currentNode.outerHTML : currentNode.textContent;
            currentNode = currentNode.nextSibling;
        }

        return cleanContent(extractedContent);
    }

    function promptForURL() {
        const url = prompt("Please enter a URL from Archives of Nethys:");
        if (url) {
            processURL(url);
        }
    }

    function replaceContent(content) {
        const cursorPosition = editor.getCursor();
        editor.replaceRange(content, cursorPosition);
    }

    async function processURL(url) {
        const serverEndpoint = '@Url.Action("PostImport", "Import")';
        const localStorageKey = `archive-${url}`;
        const parser = new DOMParser();

        let content = localStorage.getItem(localStorageKey);
        if (content) {
            content = parser.parseFromString(content, 'text/html');
        }
        else {
            try {
                const response = await fetch(serverEndpoint, {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify({ Url: url })
                });

                if (!response.ok) {
                    throw new Error('Network response was not ok');
                }

                let data = await response.text();
                data = parser.parseFromString(data, 'text/html');
                let element = data.getElementById('ctl00_RadDrawer1_Content_MainContent_DetailedOutput');
                localStorage.setItem(localStorageKey, element.innerHTML);
                content = element;
            } catch (error) {
                console.error('There was a problem with the fetch operation:', error.message);
            }
        }
        content = extractContent(content);
        replaceContent(content);
        
    }

    function replacePlaceholders(placeholder) {
        // Remember that classes need to be in a list, even if only one element
        const elements = {
            "cover": { "html": "img", "classes": ["cover", "wide"], "isImage": true },
            "title": { "html": "h1", "classes": ["wide", "title"] },
            "header": { "html": "header", "classes": ["wide", "subtitle"] },
            "columnbreak": { "html": "div", "classes": ["break"] },
            "linebreak": { "html": "div", "classes": ["linebreak"] },
            "passive": { "html": "img", "src": "../assets/passive.png", "classes": ["action", "oneaction"] },
            "freeaction": { "html": "img", "src": "../assets/freeaction.png", "classes": ["action", "oneaction"] },
            "oneaction": { "html": "img", "src": "../assets/oneaction.png", "classes": ["action", "oneaction"] },
            "twoaction": { "html": "img", "src": "../assets/twoaction.png", "classes": ["action", "twoaction"] },
            "threeaction": { "html": "img", "src": "../assets/threeaction.png", "classes": ["action", "threeaction"] },
            "reaction": { "html": "img", "src": "../assets/reaction.png", "classes": ["action", "oneaction"] },
            "tag": { "html": "div", "classes": ["tag"] },
            "label": { "html": "div", "classes": ["label"] },
            "line": { "html": "div", "classes": ["line"] },
        }
        const regex = /([a-zA-Z]+)(.*)/mg;

        placeholder = placeholder.replace(regex, function (match, element, content) {

                element = elements[element.toLowerCase()]
                if (element === undefined) {
                    return match;
                }
                const newElement = document.createElement(element["html"]);
                if (element["src"] !== undefined) {
                    newElement.src = element["src"];
                }
                if (element["isImage"] !== undefined) {
                    newElement.src = content.trim();
                }
                else {
                    newElement.innerHTML = content.trim();
                }
                element["classes"]?.forEach(className => {
                    newElement.classList.add(className);
                });
                return newElement.outerHTML;
        });

        return placeholder;
    }

    function replaceBrackets(text) {
        let index = 0;
        function processSegment() {
            let content = '';
            while (index < text.length) {
                if (text[index] === '{' && text[index + 1] === '{') {
                    index += 2;
                    content += processSegment();
                } else if (text[index] === '}' && text[index + 1] === '}') {
                    index += 2;
                    return replacePlaceholders(content);
                } else {
                    content += text[index++];
                }
            }
            return content;
        }

        return processSegment();
    }

    function applyClasses(content, selectors, className) {
        selectors.forEach(selector => {
            content.querySelectorAll(selector).forEach(element => {
                element.classList.add(className);
            });
        });
       
    }

    function createElementWithClass(tagName, className) {
        const element = document.createElement(tagName);
        element.classList.add(className);
        return element;
    }

    function displayChange() {
        shadow.innerHTML = "";
        let htmlContent = editor.getValue();
        htmlContent = htmlContent.split("\{\{pagebreak\}\}");
        for (let element of htmlContent) {
            let page = createElementWithClass("div", "page");
            let columnWrapper = createElementWithClass("div", "columnWrapper");
            columnWrapper.innerHTML = replaceBrackets(converter.makeHtml(element));
            applyClasses(columnWrapper, ["h1", "subtitle"], "wide");
            columnWrapper.innerHTML = columnWrapper.innerHTML.replace(/<p><\/p>|}}/gm, "");
            page.appendChild(columnWrapper);
            shadow.appendChild(page); 
        }
        shadow.appendChild(pageStyle);
        
    }

    editor.on("change", function() {
        displayChange(); 
        $("#displayAreaHolder").scrollTop(localStorage.getItem("PathBinder-Scroll"));
    });

    function postDocument() {
        let content = editor.getValue();
        let currentlyOpenUid = localStorage.getItem('currentlyOpen');
        let existingDocumentData = JSON.parse(localStorage.getItem(currentlyOpenUid));
        existingDocumentData.content = content;
        localStorage.setItem(currentlyOpenUid, JSON.stringify(existingDocumentData));
    }

    function getDocument() {
        let uid = localStorage.getItem('currentlyOpen');
        if (uid !== null) {
            let doc = localStorage.getItem(uid);
            if (doc !== null) {
                doc = JSON.parse(doc);
                editor.setValue(doc.content);
                setBackgroundImage(doc.cover);
            } else {
                alert("Document not found!");
            }
        } else {
            alert("No document currently open!");
        }
    }

    function printDocument() {
        document.querySelectorAll('head link[rel="stylesheet"]').forEach((link) => {
            if (!link.href.endsWith('/css/site.css')) {
                shadow.appendChild(link.cloneNode());
            }
        });
        let printStyle = document.createElement("style");
        printStyle.textContent = `
                    html { margin: 0!important; }
                    body { margin: 0!important; }
                    .page { margin: 0!important; }
        `
        shadow.appendChild(printStyle)
        document.documentElement.innerHTML = shadow.innerHTML;
    }

    const config = { minColumnWidth: 200, resizerSelector: ".resizer", mainSectionSelector: "section" };
    const state = { isResizing: false, initialX: null, initialWidths: null };
    const elements = {
        resizer: document.querySelector(config.resizerSelector),
        main: document.querySelector(config.mainSectionSelector)
    };

    elements.resizer.addEventListener("mousedown", e => {
        state.isResizing = true;
        state.initialX = e.clientX;
        state.initialWidths = getInitialWidths();
        document.addEventListener("mousemove", onMouseMove);
        document.addEventListener("mouseup", onMouseUp);
    });

    function getInitialWidths() {
        const styles = getComputedStyle(elements.main);
        const columns = styles.gridTemplateColumns.split(" ");
        return [parseInt(columns[0]), parseInt(columns[2])];
    }

    function onMouseMove(e) {
        if (!state.isResizing) return;
        const deltaX = e.clientX - state.initialX;
        const [newLeftWidth, newRightWidth] = updateWidths(deltaX);
        elements.main.style.gridTemplateColumns = `${newLeftWidth}px 10px ${newRightWidth}px`;
    }

    function updateWidths(deltaX) {
        let newLeftWidth = state.initialWidths[0] + deltaX;
        let newRightWidth = state.initialWidths[1] - deltaX;
        if (newLeftWidth < config.minColumnWidth) {
            newLeftWidth = config.minColumnWidth;
            newRightWidth = state.initialWidths[0] + state.initialWidths[1] - config.minColumnWidth;
        } else if (newRightWidth < config.minColumnWidth) {
            newRightWidth = config.minColumnWidth;
            newLeftWidth = state.initialWidths[0] + state.initialWidths[1] - config.minColumnWidth;
        }
        return [newLeftWidth, newRightWidth];
    }

    function onMouseUp() {
        state.isResizing = false;
        document.removeEventListener("mousemove", onMouseMove);
        document.removeEventListener("mouseup", onMouseUp);
    }

    window.onload = (event) => {
        localStorage.setItem("PathBinder-Scroll", 0);
        getDocument();
    };
</script>
@section Scripts {
    @{
        await Html.RenderPartialAsync("_ValidationScriptsPartial");
    }
}