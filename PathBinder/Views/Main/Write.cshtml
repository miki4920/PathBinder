@{
    ViewData["Title"] = "Write";
}
<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/codemirror/6.65.7/codemirror.min.css" />
<style>
    section {
        display: grid;
        flex-basis: 100%;
        grid-template-columns: 1fr 10px 1fr;
        background-color: rgb(249, 241, 223);
    }

    #writeAreaHolder {
        display: flex;
        overflow-y: auto;
    }

    #writeAreaHolder nav {
        flex: 1 1 auto;
        background-color: rgb(255, 255, 255);
        flex-direction: row;
        padding: 0;
    }

    button {
        cursor: pointer; 
        border: none;
        text-decoration: none;
        padding: 6px;
        flex-grow:0;
    }

    #writeArea, #displayAreaHolder {
        flex-direction: column;
        overflow-x: hidden;
        overflow-y: auto;
        color: #000000;
        flex-grow: 1;
    }

    #displayAreaHolder {
        padding: 0 10px;
    }

    #writeArea {
        font-family: monospace;
        line-height: 21px;
        overflow-y: auto;
        flex-basis: 100%;
    }

    .CodeMirror {
        height: 100%;
        background-color: rgb(249, 241, 223);
    }

    .resizer {
        cursor: ew-resize;
        background-color: rgb(18, 24, 32);
    }
</style>
<section>
    <div id="writeAreaHolder">
        <nav>
            <button onclick="postDocument()">Save</button>
            <button onclick="printDocument()">Print</button>
        </nav>
        <div id="writeArea">
    </div>
    </div>
    <div class="resizer"></div>
    <div id="displayAreaHolder"></div>
</section>
<script src="~/lib/jquery/dist/jquery.min.js"></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/codemirror/6.65.7/codemirror.min.js"></script>
<script src="https://unpkg.com/showdown/dist/showdown.min.js"></script>
<script>
    $("#displayAreaHolder").on("scroll", function () {
        localStorage.setItem("PathBinder-Scroll", $("#displayAreaHolder").scrollTop());
    });

    const editor = CodeMirror(document.getElementById("writeArea"), {
        lineNumbers: true,
        lineWrapping: true,
        styleActiveLine: true,
        matchBrackets: true,
        theme: "default",
        mode: "markdown",
        scrollbarStyle: "native"
    });

    const displayArea = document.getElementById("displayAreaHolder");
    const converter = new showdown.Converter();
    const shadow = displayArea.attachShadow({ mode: "open" });
    const style = document.createElement("style");
    style.textContent = `
            .page {
                margin: 30px auto;
                background-image: url(../assets/page.png);
                box-shadow: 1px 4px 14px #000;
                padding-left: 75px;
                padding-right: 1.5cm;
                padding-bottom: 0.5cm;
                padding-top: 1cm;
            }

            .page, .columnWrapper {
                column-count: 2;
                column-fill: auto;
                height: 279.4mm;
                width: 215.9mm;
                overflow: hidden;
            }

            .page * {
                font-size: .317cm;
            }

            .page .columnWrapper {
                column-span: all;
            }

            .page .wide {
                column-span: all;
                text-align: center;
            }

            .page .title {
                    text-shadow: 1px 1px 0 #EFCD98, -1px 1px 0 #EFCD98, 1px -1px 0 #EFCD98,
                    -1px -1px 0 #EFCD98, 0px 1px 0 #EFCD98, 0px -1px 0 #EFCD98, -1px 0px 0 #EFCD98,
                    1px 0px 0 #EFCD98, 2px 2px 0 #EFCD98, -2px 2px 0 #EFCD98, 2px -2px 0 #EFCD98,
                    -2px -2px 0 #EFCD98, 0px 2px 0 #EFCD98, 0px -2px 0 #EFCD98, -2px 0px 0 #EFCD98,
                    2px 0px 0 #EFCD98, 1px 2px 0 #EFCD98, -1px 2px 0 #EFCD98, 1px -2px 0 #EFCD98,
                    -1px -2px 0 #EFCD98, 2px 1px 0 #EFCD98, -2px 1px 0 #EFCD98, 2px -1px 0 #EFCD98,
                    -2px -1px 0 #EFCD98;
            }

            .page .subtitle {
                margin-top: -30px;
                font-size: 1.4em;
                color: #5E0000;
                background-image: url(../assets/subtitle.png);
                background-position: bottom;
                background-repeat: no-repeat;
                padding: 0 40px 40px 40px;
                background-size: 800px;
                font-family: 'DM Serif Text', serif;
                text-align: justify;
            }

            .page .break {
                -webkit-column-break-after: always;
            }

            .page .linebreak {
                   border-bottom: 1px solid;
            }

            .page .action {
                margin-top: 0px;
                margin-bottom: 0px;
                margin-right: -1px;
                margin-left: -1px;
            }

            .page .oneaction {
                width: 14px;
            }

            .page .twoaction {
                height: 22px;
                width: 24px;
            }

            .page .threeaction {
                height: 28px;
                width: 32px;
            }

            .page .label {
                float: right;
                font-size: .458cm;
            }

            .page .tag {
                margin: 0;
                margin-right: -4px;
                display: inline-block;
                font-family: 'Roboto Condensed', sans-serif;
                border: 2px solid #DAC68A;
                border-radius: 2px;
                background-color: #58180D;
                color: white;
                text-align: center;
                padding: 2px 4px;
                text-transform: uppercase;
            }

            .page .line {
                margin-left: 1em;
                text-indent: -1em;
            }

            .page h1, .page h2, .page h3, .page h4, .page h5 {
                margin-top: 0.2em;
                margin-bottom: 0.2em;
            }

            .page h1 {
                font-size: 5em;
                -webkit-text-stroke-width: 1.2px;
                font-family: 'Eczar', sans-serif;
                color: #58180D;
            }

            .page h2 {
                color:#02256E;
                font-size: 2.25em;
                line-height: 1.1;
                -webkit-text-stroke-width: 0.9px;
                    font-family: 'Eczar', sans-serif;
            }

            .page h3 {
                font-family: 'Teko', sans-serif;
                font-size: 2em;
                -webkit-text-stroke-width: 0.6px;
                font-weight:normal;
                color: #58180D;
            }

            .page h4 {
                font-family: 'Tauri', sans-serif;
                margin-bottom: 0;
                border-bottom: 1px solid;
                font-size: .458cm;
                font-weight: normal;
                -webkit-text-stroke-width: 0.5px;
                color: #000000;
            }

            .page h5 {
                font-family: 'Tauri', sans-serif;
                font-size: .423cm;
                font-weight: 900;
                text-transform: uppercase;
                margin-top: 10.5px;
                color: #000000;
            }

            .page h6 {
                background-color: #002664;
                color: #EDE3C8;
                border-bottom: 1px solid #002664;
                margin-bottom: 5px;
                padding-left: 8px;
                padding-top: 5px;
                padding-bottom: 3px;
                font-size: 1.25em;
                font-family: 'Tauri', sans-serif;
                text-transform: uppercase;
                border-radius: 12px 12px 0px 0px;
                font-weight: 500;
                margin-top: 10.5px;
            }

            .page p {
                font-family: 'Gelasio', sans-serif;
                line-height: 1.4;
                text-align: justify;
                margin: 0;
            }

            .page p+p {
                text-indent: 1em;
            }

            .page img {
                vertical-align: middle;
            }
        `;

    function replacePlaceholders(placeholder) {
        const elements = {
            "header": { "html": "header", "classes": ["wide", "subtitle"] },
            "title": { "html": "h1", "classes": ["wide", "title"] },
            "columnbreak": { "html": "div", "classes": ["break"] },
            "linebreak": { "html": "div", "classes": ["linebreak"] },
            "passive": { "html": "img", "src": "../assets/passive.png", "classes": ["action", "oneaction"] },
            "freeaction": { "html": "img", "src": "../assets/freeaction.png", "classes": ["action", "oneaction"] },
            "oneaction": { "html": "img", "src": "../assets/oneaction.png", "classes": ["action", "oneaction"] },
            "twoaction": { "html": "img", "src": "../assets/twoaction.png", "classes": ["action", "twoaction"] },
            "threeaction": { "html": "img", "src": "../assets/threeaction.png", "classes": ["action", "threeaction"] },
            "reaction": { "html": "img", "src": "../assets/reaction.png", "classes": ["action", "oneaction"] },
            "tag": { "html": "div", "classes": ["tag"] },
            "label": { "html": "div", "classes": ["label"] },
            "line": { "html": "div", "classes": ["line"] },
        }
        const regex = /([a-zA-Z]+)(.*)/mg;
        
        placeholder = placeholder.replace(regex, (match, element, content) => {
            element = elements[element.toLowerCase()]
            if (element === undefined) {
                return match;
            }
            const newElement = document.createElement(element["html"]);
            if (element["src"] !== undefined) {
                newElement.src = element["src"];
            }
            newElement.innerHTML = content.trim();
            element["classes"]?.forEach(className => {
                newElement.classList.add(className);
            })
            return newElement.outerHTML;
        })
        return placeholder;
    }

    function replaceBrackets(text, fn) {
        let index = 0;
        function processSegment() {
            let content = '';
            while (index < text.length) {
                if (text[index] === '{' && text[index + 1] === '{') {
                    index += 2;
                    content += processSegment();
                } else if (text[index] === '}' && text[index + 1] === '}') {
                    index += 2;
                    console.log(content);
                    return fn(content);
                } else {
                    content += text[index++];
                }
            }
            return content;
        }

        return processSegment();
    }

    function applyClasses(content, selectors, className) {
        selectors.forEach(selector => {
            content.querySelectorAll(selector).forEach(element => {
                element.classList.add(className);
            });
        });
       
    }

    function createElementWithClass(tagName, className) {
        const element = document.createElement(tagName);
        element.classList.add(className);
        return element;
    }

    function displayChange() {
        shadow.innerHTML = "";
        let htmlContent = editor.getValue();
        htmlContent = htmlContent.split("\{\{pagebreak\}\}");
        for (let element of htmlContent) {
            let page = createElementWithClass("div", "page");
            let columnWrapper = createElementWithClass("div", "columnWrapper");
            columnWrapper.innerHTML = replaceBrackets(converter.makeHtml(element), replacePlaceholders);
            applyClasses(columnWrapper, ["h1", "subtitle"], "wide");
            columnWrapper.innerHTML = columnWrapper.innerHTML.replace(/<p><\/p>|}}/gm, "");
            page.appendChild(columnWrapper);
            shadow.appendChild(page); 
        }
        shadow.appendChild(style);
        let selectors = $('p');
    }

    editor.on("change", () => {
        displayChange();
    });
    
    async function postDocument() {
        try {

            const response = await fetch("@Url.Action("GetDocument", "Document")", {
                method: "POST",
                headers: {
                    "Content-Type": "application/json",
                },
                body: JSON.stringify({ "name": "miki4920", "content": editor.getValue() }),
            });

            if (!response.ok) {
                throw new Error("Network response was not ok " + response.statusText);
            }

            const jsonResponse = await response.json();
            console.log("Success:", jsonResponse);
        } catch (error) {
            console.error("Error:", error);
        }
    }

    async function getDocument() {
        try {
            const response = await fetch("@Url.Action("GetDocument", "Document")" + "/10");

            if (!response.ok) {
                throw new Error("Network response was not ok " + response.statusText);
            }

            const documentData = await response.json();
            editor.setValue(documentData.content);
        } catch (error) {
            console.error("Error fetching document:", error);
        }
    }

    const config = { minColumnWidth: 200, resizerSelector: ".resizer", mainSectionSelector: "section" };
    const state = { isResizing: false, initialX: null, initialWidths: null };
    const elements = {
        resizer: document.querySelector(config.resizerSelector),
        main: document.querySelector(config.mainSectionSelector)
    };

    elements.resizer.addEventListener("mousedown", e => {
        state.isResizing = true;
        state.initialX = e.clientX;
        state.initialWidths = getInitialWidths();
        document.addEventListener("mousemove", onMouseMove);
        document.addEventListener("mouseup", onMouseUp);
    });

    function getInitialWidths() {
        const styles = getComputedStyle(elements.main);
        const columns = styles.gridTemplateColumns.split(" ");
        return [parseInt(columns[0]), parseInt(columns[2])];
    }

    function onMouseMove(e) {
        if (!state.isResizing) return;
        const deltaX = e.clientX - state.initialX;
        const [newLeftWidth, newRightWidth] = updateWidths(deltaX);
        elements.main.style.gridTemplateColumns = `${newLeftWidth}px 10px ${newRightWidth}px`;
    }

    function updateWidths(deltaX) {
        let newLeftWidth = state.initialWidths[0] + deltaX;
        let newRightWidth = state.initialWidths[1] - deltaX;
        if (newLeftWidth < config.minColumnWidth) {
            newLeftWidth = config.minColumnWidth;
            newRightWidth = state.initialWidths[0] + state.initialWidths[1] - config.minColumnWidth;
        } else if (newRightWidth < config.minColumnWidth) {
            newRightWidth = config.minColumnWidth;
            newLeftWidth = state.initialWidths[0] + state.initialWidths[1] - config.minColumnWidth;
        }
        return [newLeftWidth, newRightWidth];
    }

    function onMouseUp() {
        state.isResizing = false;
        document.removeEventListener("mousemove", onMouseMove);
        document.removeEventListener("mouseup", onMouseUp);
    }

    window.onload = (event) => {
        getDocument();
    };
</script>
@section Scripts {
    @{
        await Html.RenderPartialAsync("_ValidationScriptsPartial");
    }
}