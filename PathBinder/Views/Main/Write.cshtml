@{
    ViewData["Title"] = "Write";
}
<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/codemirror/6.65.7/codemirror.min.css" />
<style>
    section {
        display: grid;
        flex-basis: 100%;
        grid-template-columns: 1fr 10px 1fr;
        background-color: rgb(249, 241, 223);
    }

    #writeAreaHolder, #displayAreaHolder {
        flex-direction: column;
        overflow-y: auto;
        padding: 0 10px;
    }

    #writeAreaHolder {
        font-family: monospace;
        line-height: 21px;
    }

    .CodeMirror {
        height: 100%;
        background-color: rgb(249, 241, 223);
    }

    .resizer {
        cursor: ew-resize;
        background-color: rgb(18, 24, 32);
        width: 10px;
    }
</style>
<section>
    <div id="writeAreaHolder"></div>
    <div class="resizer"></div>
    <div id="displayAreaHolder"></div>
</section>

<script src="https://cdnjs.cloudflare.com/ajax/libs/codemirror/6.65.7/codemirror.min.js"></script>
<script src="https://unpkg.com/showdown/dist/showdown.min.js"></script>
<script>
    const editor = CodeMirror(document.getElementById('writeAreaHolder'), {
        lineNumbers: true,
        lineWrapping: true,
        styleActiveLine: true,
        matchBrackets: true,
        theme: 'default',
        mode: 'markdown',
        scrollbarStyle: "native"
    });

    const displayArea = document.getElementById('displayAreaHolder');
    const converter = new showdown.Converter();
    const shadow = displayArea.attachShadow({ mode: 'open' });
    const style = document.createElement("style");
    style.textContent = `
            .page {
                margin-top: 20px;
                margin-left: auto;
                margin-right: auto;
                padding: 40px;
                background-image: url(../assets/page.jpg)
            }

            .page, .columnWrapper {
                column-count: 2;
                column-fill: auto;
                height: 279.4mm;
                width: 215.9mm;
                overflow: hidden;
            }

            .page h1 {
                column-span: all;
            }

            .page p {
                margin: 0;
            }

            .columnWrapper {
                height: 279.4mm;
                column-count: inherit;
                column-span: all;

            }
        `;

    function isOverflowing(page) {
        const wrapperRectangle = page.firstChild.getBoundingClientRect();
        const elements = page.firstChild.children;

        for (let element of elements) {
            const elemRect = element.getBoundingClientRect();
            if (elemRect.x > wrapperRectangle.x + wrapperRectangle.width) {
                return true;
            }
        }
        return false;
    }

    function createElementWithClass(tagName, className) {
        const element = document.createElement(tagName);
        element.classList.add(className);
        return element;
    }

    function updateDisplay() {
        let htmlContent = editor.getValue();
        let page = createElementWithClass("div", "page");
        let columnWrapper = createElementWithClass("div", "columnWrapper");

        columnWrapper.innerHTML = converter.makeHtml(htmlContent);
        shadow.innerHTML = "";
        page.appendChild(columnWrapper);
        shadow.appendChild(page);
        shadow.appendChild(style);

        setTimeout(() => {
            while (isOverflowing(page)) {
                const elements = Array.from(page.firstChild.children);
                let newPage = createElementWithClass("div", "page");
                let newColumnWrapper = createElementWithClass("div", "columnWrapper");

                newPage.appendChild(newColumnWrapper);
                const colWrapperRect = page.firstChild.getBoundingClientRect();

                for (let element of elements) {
                    const elemRect = element.getBoundingClientRect();
                    if (elemRect.x > colWrapperRect.x + colWrapperRect.width) {
                        newColumnWrapper.appendChild(element);
                    }
                }

                shadow.appendChild(newPage);
                page = newPage;
            }
        }, 0);
    }

    editor.on("change", () => {
        updateDisplay();
    });

    updateDisplay();

    const config = { minColumnWidth: 200, resizerSelector: '.resizer', mainSectionSelector: 'section' };
    const state = { isResizing: false, initialX: null, initialWidths: null };
    const elements = {
        resizer: document.querySelector(config.resizerSelector),
        main: document.querySelector(config.mainSectionSelector)
    };

    elements.resizer.addEventListener('mousedown', e => {
        state.isResizing = true;
        state.initialX = e.clientX;
        state.initialWidths = getInitialWidths();
        document.addEventListener('mousemove', onMouseMove);
        document.addEventListener('mouseup', onMouseUp);
    });

    function getInitialWidths() {
        const styles = getComputedStyle(elements.main);
        const columns = styles.gridTemplateColumns.split(' ');
        return [parseInt(columns[0]), parseInt(columns[2])];
    }

    function onMouseMove(e) {
        if (!state.isResizing) return;
        const deltaX = e.clientX - state.initialX;
        const [newLeftWidth, newRightWidth] = updateWidths(deltaX);
        elements.main.style.gridTemplateColumns = `${newLeftWidth}px 10px ${newRightWidth}px`;
    }

    function updateWidths(deltaX) {
        let newLeftWidth = state.initialWidths[0] + deltaX;
        let newRightWidth = state.initialWidths[1] - deltaX;
        if (newLeftWidth < config.minColumnWidth) {
            newLeftWidth = config.minColumnWidth;
            newRightWidth = state.initialWidths[0] + state.initialWidths[1] - config.minColumnWidth;
        } else if (newRightWidth < config.minColumnWidth) {
            newRightWidth = config.minColumnWidth;
            newLeftWidth = state.initialWidths[0] + state.initialWidths[1] - config.minColumnWidth;
        }
        return [newLeftWidth, newRightWidth];
    }

    function onMouseUp() {
        state.isResizing = false;
        document.removeEventListener('mousemove', onMouseMove);
        document.removeEventListener('mouseup', onMouseUp);
    }
</script>
