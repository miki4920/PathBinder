@{
    ViewData["Title"] = "Write";
}

<style>
    section {
        display: grid;
        grid-template-columns: 1fr 10px 1fr;
        flex-basis: 100%;
        background-color: rgb(249, 241, 223);
    }

    section article {
        padding: 0px;
    }

    #writeAreaHolder {
        display: flex;
    }

    #writeArea {
        background-color: rgb(249, 241, 223);
        flex-grow: 1;
        resize: none;
        padding: 2px;
    }

    .resizer {
        cursor: ew-resize;
        background-color: rgb(18, 24, 32);
        width: 10px;
    }

    #displayAreaHolder {
        display:flex;
        flex-direction: column;
        align-items:center;
        margin: 10px;
        overflow-x: hidden;
    }

    #displayArea {
        display: flex;
        flex-direction: column;
        width: 210mm;
        background-image: url("../assets/page.jpg");
        height: 297mm;
        flex-wrap: wrap;
        flex-direction: row;
        flex-basis: 100%;
        flex-grow: 0;
    }

</style>
<section>
    <article id="writeAreaHolder">
        <textarea autofocus id="writeArea" oninput="displayHtml()"></textarea>
    </article>
    <div class="resizer"></div>
    <div id="displayAreaHolder">
        <article id="displayArea">

        </article>
    </div>
</section>


<script type="text/javascript" src="https://unpkg.com/showdown/dist/showdown.min.js"></script>
<script>
    const config = {
        minColumnWidth: 200,
        resizerSelector: '.resizer',
        mainSectionSelector: 'section'
    };

    const state = {
        isResizing: false,
        initialX: null,
        initialWidths: null
    };

    const elements = {
        resizer: document.querySelector(config.resizerSelector),
        main: document.querySelector(config.mainSectionSelector)
    };

    function initialiseResize() {
        elements.resizer.addEventListener('mousedown', onMouseDown);
    }

    function onMouseDown(e) {
        state.isResizing = true;
        state.initialX = e.clientX;
        state.initialWidths = getInitialWidths();

        document.addEventListener('mousemove', onMouseMove);
        document.addEventListener('mouseup', onMouseUp);
    }

    function getInitialWidths() {
        const styles = getComputedStyle(elements.main);
        const columns = styles.gridTemplateColumns.split(' ');
        return [parseInt(columns[0]), parseInt(columns[2])];
    }

    function onMouseMove(e) {
        if (!state.isResizing) return;

        let deltaX = e.clientX - state.initialX;

        let [newLeftWidth, newRightWidth] = updateWidths(deltaX);

        elements.main.style.gridTemplateColumns = `${newLeftWidth}px 10px ${newRightWidth}px`;
    }

    function updateWidths(deltaX) {
        let newLeftWidth = state.initialWidths[0] + deltaX;
        let newRightWidth = state.initialWidths[1] - deltaX;

        if (newLeftWidth < config.minColumnWidth) {
            newLeftWidth = config.minColumnWidth;
            newRightWidth = state.initialWidths[0] + state.initialWidths[1] - config.minColumnWidth;
        } else if (newRightWidth < config.minColumnWidth) {
            newRightWidth = config.minColumnWidth;
            newLeftWidth = state.initialWidths[0] + state.initialWidths[1] - config.minColumnWidth;
        }

        return [newLeftWidth, newRightWidth];
    }

    function onMouseUp() {
        state.isResizing = false;

        document.removeEventListener('mousemove', onMouseMove);
        document.removeEventListener('mouseup', onMouseUp);
    }

    initialiseResize();

    let displayArea = document.getElementById('displayArea');
    let converter = new showdown.Converter();
    let shadow = displayArea.attachShadow({ mode: 'open' });
    let style = document.createElement("style");
    style.textContent = `
                    .page {
            max-width: 50%;
            display: flex;
            height: 297mm;
            flex-direction: column;
        }

        .page * {
            overflow-wrap: anywhere;
            flex-grow: 0;
        }
        `;

    function displayHtml() {
        let writeArea = document.getElementById('writeArea');
        let htmlContent = writeArea.value;
        shadow.innerHTML = "";
        shadow.appendChild(style);

        let page = document.createElement("div");
        page.classList.add("page");
        page.innerHTML = converter.makeHtml(htmlContent);
        shadow.appendChild(page);

        function getPageHeight(page) {
            return Array.from(page.children).reduce((height, element) => {
                return height + element.offsetHeight;
            }, 0);
        }

        let height = getPageHeight(page);

        while (height > page.getBoundingClientRect().height) {
            let secondPage = document.createElement("div");
            secondPage.classList.add("page");
            shadow.appendChild(secondPage);

            while (height > page.getBoundingClientRect().height && page.children.length > 0) {
                let lastElement = page.children[page.children.length - 1];
                page.removeChild(lastElement);
                secondPage.prepend(lastElement);
                height = getPageHeight(page);
            }

            page = secondPage;
            height = getPageHeight(page);
        }
        
    }





        
</script>


