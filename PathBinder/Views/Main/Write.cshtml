@{
    ViewData["Title"] = "Write";
}
<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/codemirror/6.65.7/codemirror.min.css" integrity="sha512-uf06llspW44/LZpHzHT6qBOIVODjWtv4MxCricRxkzvopAlSWnTf6hpZTFxuuZcuNE9CBQhqE0Seu1CoRk84nQ==" crossorigin="anonymous" referrerpolicy="no-referrer" />
<style>
    section {
        display: grid;
        grid-template-columns: 1fr 10px 1fr;
        flex-basis: 100%;
        background-color: rgb(249, 241, 223);
    }

    #writeAreaHolder {
        display: inline-flex;
        flex-direction: row;
        gap: 10px;
        font-family: monospace;
        line-height: 21px;
        border-radius: 2px;
        padding: 0 10px;
    }

    .CodeMirror {
        background-color: rgb(249, 241, 223);
        flex-grow: 1;
        height: 9999px;
        overflow-wrap: anywhere;
    }

    .resizer {
        cursor: ew-resize;
        background-color: rgb(18, 24, 32);
        width: 10px;
    }

    #displayAreaHolder {
        display: flex;
        flex-direction: column;
        align-items: center;
        margin: 10px;
        overflow-x: hidden;
    }

    #displayArea {
        display: flex;
        flex-wrap: wrap;
        width: 210mm;
        background-image: url("../assets/page.jpg");
        height: 297mm;
    }

</style>
<section>
    <article id="writeAreaHolder">
    </article>
    <div class="resizer"></div>
    <div id="displayAreaHolder">
        <article id="displayArea"></article>
    </div>
</section>


<script src="https://cdnjs.cloudflare.com/ajax/libs/codemirror/6.65.7/codemirror.min.js" integrity="sha512-8RnEqURPUc5aqFEN04aQEiPlSAdE0jlFS/9iGgUyNtwFnSKCXhmB6ZTNl7LnDtDWKabJIASzXrzD0K+LYexU9g==" crossorigin="anonymous" referrerpolicy="no-referrer"></script>
<script type="text/javascript" src="https://unpkg.com/showdown/dist/showdown.min.js"></script>
<script>
    let displayArea = document.getElementById('displayArea');
    let converter = new showdown.Converter();
    let shadow = displayArea.attachShadow({ mode: 'open' });
    let style = document.createElement("style");
    style.textContent = `
            .page {
                max-width: 50%;
                display: flex;
                height: 297mm;
                flex-direction: column;
            }

            .page * {
                overflow-wrap: anywhere;
            }
        `;
    shadow.appendChild(style);

    function displayHtml() {
        let htmlContent = editor.getValue();
        console.log(htmlContent);
        let page = document.createElement("div");
        page.classList.add("page");
        page.innerHTML = converter.makeHtml(htmlContent);
        shadow.innerHTML = "";
        shadow.appendChild(page);

        function getPageHeight(page) {
            return Array.from(page.children).reduce((height, element) => {
                return height + element.offsetHeight;
            }, 0);
        }

        let height = getPageHeight(page);

        while (height > page.getBoundingClientRect().height) {
            let secondPage = document.createElement("div");
            secondPage.classList.add("page");
            shadow.appendChild(secondPage);

            while (height > page.getBoundingClientRect().height && page.children.length > 0) {
                let lastElement = page.children[page.children.length - 1];
                page.removeChild(lastElement);
                secondPage.prepend(lastElement);
                height = getPageHeight(page);
            }

            page = secondPage;
            height = getPageHeight(page);
        }
    }

    let editor = CodeMirror(document.getElementById('writeAreaHolder'), {
        lineNumbers: true,
        lineWrapping: true,
        styleActiveLine: true,
        matchBrackets: true,
        theme: 'default',
        mode: 'markdown',
    });
    editor.on("change", function() {
        displayHtml()
    })

    const config = {
        minColumnWidth: 200,
        resizerSelector: '.resizer',
        mainSectionSelector: 'section'
    };

    const state = {
        isResizing: false,
        initialX: null,
        initialWidths: null
    };

    const elements = {
        resizer: document.querySelector(config.resizerSelector),
        main: document.querySelector(config.mainSectionSelector)
    };

    function initialiseResize() {
        elements.resizer.addEventListener('mousedown', onMouseDown);
    }

    function onMouseDown(e) {
        state.isResizing = true;
        state.initialX = e.clientX;
        state.initialWidths = getInitialWidths();

        document.addEventListener('mousemove', onMouseMove);
        document.addEventListener('mouseup', onMouseUp);
    }

    function getInitialWidths() {
        const styles = getComputedStyle(elements.main);
        const columns = styles.gridTemplateColumns.split(' ');
        return [parseInt(columns[0]), parseInt(columns[2])];
    }

    function onMouseMove(e) {
        if (!state.isResizing) return;

        let deltaX = e.clientX - state.initialX;

        let [newLeftWidth, newRightWidth] = updateWidths(deltaX);

        elements.main.style.gridTemplateColumns = `${newLeftWidth}px 10px ${newRightWidth}px`;
    }

    function updateWidths(deltaX) {
        let newLeftWidth = state.initialWidths[0] + deltaX;
        let newRightWidth = state.initialWidths[1] - deltaX;

        if (newLeftWidth < config.minColumnWidth) {
            newLeftWidth = config.minColumnWidth;
            newRightWidth = state.initialWidths[0] + state.initialWidths[1] - config.minColumnWidth;
        } else if (newRightWidth < config.minColumnWidth) {
            newRightWidth = config.minColumnWidth;
            newLeftWidth = state.initialWidths[0] + state.initialWidths[1] - config.minColumnWidth;
        }

        return [newLeftWidth, newRightWidth];
    }

    function onMouseUp() {
        state.isResizing = false;

        document.removeEventListener('mousemove', onMouseMove);
        document.removeEventListener('mouseup', onMouseUp);
    }

    initialiseResize();

    





        
</script>


